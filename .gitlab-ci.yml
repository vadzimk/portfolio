workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

stages:
#  - install
  - build-cms
  - deploy-cms
  - build-next  # cms must be already up in order to execute next static build
  - deploy-next

variables:
  BACKEND_IMAGE_TAG_FILENAME: backend_image_tag.txt
#  FLUSHCACHE: "false" # trigger job to produce cache always when $FLUSHCACHE == "true"

init_database:
  stage: build-cms
  before_script:
    - set -o allexport &&
      source $CMS_ENV &&
      set +o allexport # get database name
  script:
    # init db for strapi cms
    - chmod 400 $WS_KEY # private key
    - export POSTGRES_PASSWORD=$POSTGRES_PASSWORD;
    - export POSTGRES_USER=$POSTGRES_USER;
    - ssh -o StrictHostKeyChecking=no -i $WS_KEY ubuntu@$WS_HOST "
      docker exec -i pgbackups bash -c \"
      set -e;
      export PGPASSWORD=$POSTGRES_PASSWORD;
      if psql -h $DATABASE_HOST -p $DATABASE_PORT -U $POSTGRES_USER -lqt | cut -d \| -f 1 | grep -qw $DATABASE_NAME;
      then
      echo $DATABASE_NAME exists;
      else
      createdb -h $DATABASE_HOST -p $DATABASE_PORT -U $POSTGRES_USER -T template0 $DATABASE_NAME;
      echo $DATABASE_NAME created;
      ./restore.sh $DATABASE_NAME;
      fi;
      \" "

#  shared dependencies are necessary only when there are jobs that share them, rn there is a single consumer job
#install_backend_dependencies:
#  stage: install
#  image: node:16-alpine
#  script:
#    - cd backend
#    - npm ci --cache .npm --prefer-offline
#  cache:
#    key: DEP-CMS-$CI_COMMIT_REF_SLUG # separate key for dependencies
#    paths:
#      - backend/node_modules
#      - backend/.npm/
#    policy: push
#  rules:
#    - if: $FLUSHCACHE == "true"
#      when: always
#    - if: $FLUSHCACHE == "false"
#      changes:
#        - backend/package-lock.json
#      when: always
#    - when: never


#install_frontend_dependencies:
#  stage: install
#  image: node:16-alpine
#  script:
#    - cd frontend
#    - npm ci --cache .npm --prefer-offline
#  cache:
#    key: DEP-NEXT-$CI_COMMIT_REF_SLUG # separate key for dependencies
#    paths:
#      - frontend/node_modules
#      - frontend/.npm/
#    policy: push
#  rules:
#    - if: $FLUSHCACHE == "true"
#      when: always
#    - if: $FLUSHCACHE == "false"
#      changes:
#        - frontend/package-lock.json
#      when: always
#    - when: never


build_backend:
  stage: build-cms
  image: docker:20.10.17
  variables:
    # using "docker" as the host is only possible if you alias the service below
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    SERVICE_NAME: "cms_strapi"
  services:
    - name: docker:20.10.17-dind
      alias: docker
      command: [ "--tls=false" ]
  before_script:
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/$SERVICE_NAME
    - apk add jq # install app to parse package.json
    - export PACKAGE_VERSION=$(cat backend/package.json | jq -r .version)
    - export IMAGE_TAG=$PACKAGE_VERSION.$CI_PIPELINE_IID
    - echo "IMAGE_TAG=$IMAGE_TAG"
    - echo "${SERVICE_NAME}_IMAGE_TAG"=$IMAGE_TAG
    - echo "${SERVICE_NAME}_IMAGE_TAG=${IMAGE_TAG}" >> build.env
    - echo "${IMAGE_TAG}" > "${BACKEND_IMAGE_TAG_FILENAME}"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:$IMAGE_TAG ./backend
    - docker push $IMAGE_NAME:$IMAGE_TAG
  artifacts: # by default uploaded to all following stages if not specified in dependencies
    name: "$CI_JOB_NAME"
    paths:
      - backend_image_tag.txt
    reports:
      dotenv: build.env # loaded in all subsequent jobs (must be relative to working directory of .gitlab-ci.yml)
#  cache:
#    key: DEP-CMS-$CI_COMMIT_REF_SLUG
#    paths:
#      - backend/node_modules
#      - backend/.npm/
#    policy: pull


deploy_backend:
  stage: deploy-cms
  variables:
    SERVICE_NAME: "cms_strapi"
    PATH_BCK: "/home/ubuntu/applications/portfolio/cms"
  before_script:
    - chmod 400 $WS_KEY # private key
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/$SERVICE_NAME
    - export IMAGE_TAG=$(eval "echo \${${SERVICE_NAME}_IMAGE_TAG}") # use nested substitution for sh
    - echo $IMAGE_NAME
    - echo "$SERVICE_NAME"_IMAGE_TAG
    - echo $IMAGE_TAG
    - cat $CMS_ENV > .CMS_ENV
    - ls -htla
  script:
    - ssh -o StrictHostKeyChecking=no -i $WS_KEY ubuntu@$WS_HOST "if [ ! -d ${PATH_BCK} ]; then mkdir -p ${PATH_BCK}; fi;"
    - scp -o StrictHostKeyChecking=no -i $WS_KEY backend/docker-compose.yml .CMS_ENV ubuntu@$WS_HOST:${PATH_BCK}/
    # start cms
    - ssh -o StrictHostKeyChecking=no -i "$WS_KEY" "ubuntu@$WS_HOST" "
      cd ${PATH_BCK} &&
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      set -o allexport &&
      source .CMS_ENV &&
      set +o allexport &&
      rm .CMS_ENV &&
      ls -htla &&
      export DC_IMAGE_NAME=$IMAGE_NAME &&
      export DC_IMAGE_TAG=$IMAGE_TAG &&
      export DATABASE_USERNAME=$POSTGRES_USER &&
      export DATABASE_PASSWORD=$POSTGRES_PASSWORD &&
      echo DATABASE_PASSWORD=$POSTGRES_PASSWORD &&
      docker network create common_network || true &&
      docker-compose down &&
      docker-compose up -d"
  resource_group: dev # fix The deployment job is older than the previously succeeded deployment job, and therefore cannot be run

build_frontend:
  stage: build-next
  image: docker:20.10.17
  variables:
    # using "docker" as the host is only possible if you alias the service below
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    SERVICE_NAME: "portfolio_next"
  services:
    - name: docker:20.10.17-dind
      alias: docker
      command: [ "--tls=false" ]
  before_script:
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/$SERVICE_NAME
    - apk add jq # install app to parse package.json
    - export PACKAGE_VERSION=$(cat frontend/package.json | jq -r .version)
    - export IMAGE_TAG=$PACKAGE_VERSION.$CI_PIPELINE_IID
    - echo "IMAGE_TAG=$IMAGE_TAG"
    - echo "${SERVICE_NAME}_IMAGE_TAG"=$IMAGE_TAG
    - echo "${SERVICE_NAME}_IMAGE_TAG=${IMAGE_TAG}" >> build.env
    - set -o allexport
    - source $NEXT_BUILD_ENV
    - set +o allexport
    - echo $IMAGE_HOST_NAME
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export DOCKER_BUILDKIT=0  # allows networking during build
    - docker network create common_network || true
    - docker-compose -f ./frontend/docker-compose.yml build
    - docker push $IMAGE_NAME:$IMAGE_TAG
  artifacts: # by default uploaded to all following stages if not specified in dependencies
    reports:
      dotenv: build.env # loaded in all subsequent jobs (must be relative to working directory of .gitlab-ci.yml)
#  cache:
#    key: DEP-NEXT-$CI_COMMIT_REF_SLUG
#    paths:
#      - frontend/node_modules
#      - frontend/.npm/
#    policy: pull


deploy_frontend:
  stage: deploy-next
  variables:
    SERVICE_NAME: "portfolio_next"
    PATH_FRONT: "/home/ubuntu/applications/portfolio/next"
  before_script:
    - chmod 400 $WS_KEY # private key
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/$SERVICE_NAME
    - export IMAGE_TAG=$(eval "echo \${${SERVICE_NAME}_IMAGE_TAG}") # use nested substitution for sh
    - echo $IMAGE_NAME
    - echo "$SERVICE_NAME"_IMAGE_TAG
    - echo $IMAGE_TAG
    - set -o allexport
    - source $NEXT_RUN_ENV
    - set +o allexport;
    - ls -htla
  script:
    - ssh -o StrictHostKeyChecking=no -i $WS_KEY ubuntu@$WS_HOST "if [ ! -d ${PATH_FRONT} ]; then mkdir -p ${PATH_FRONT}; fi;"
    - scp -o StrictHostKeyChecking=no -i $WS_KEY frontend/docker-compose.yml frontend/Dockerfile ubuntu@$WS_HOST:${PATH_FRONT}/
    - ssh -o StrictHostKeyChecking=no -i $WS_KEY ubuntu@$WS_HOST "
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      export IMAGE_NAME=$IMAGE_NAME &&
      export IMAGE_TAG=$IMAGE_TAG &&
      cd ${PATH_FRONT} 
      { echo "-----";
      echo BASE_URL=$BASE_URL;
      echo IMAGE_HOST_NAME=$IMAGE_HOST_NAME;
      echo IMAGE_HOST_DOMAIN=$IMAGE_HOST_DOMAIN;
      echo REVALIDATE_TOKEN=$REVALIDATE_TOKEN; } &&
      { docker network create common_network || true; } &&
      { docker stop portfolio_next || true; } &&
      { docker rm portfolio_next || true; } &&
      docker container run
      --name=portfolio_next
      --network=common_network
      --restart=always
      -p 3000:3000
      -e BASE_URL=$BASE_URL
      -e IMAGE_HOST_NAME=$IMAGE_HOST_NAME
      -e IMAGE_HOST_DOMAIN=$IMAGE_HOST_DOMAIN
      -e REVALIDATE_TOKEN=$REVALIDATE_TOKEN
      -d ${IMAGE_NAME}:${IMAGE_TAG};
      ";
  resource_group: dev # fix The deployment job is older than the previously succeeded deployment job, and therefore cannot be run