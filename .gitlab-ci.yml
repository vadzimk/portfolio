workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

stages:
  - build
  - deploy


build_backend:
  stage: build
  image: docker:20.10.17
  variables:
    # using "docker" as the host is only possible if you alias the service below
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    SERVICE_NAME: "cms_strapi"
  services:
    - name: docker:20.10.17-dind
      alias: docker
      command: [ "--tls=false" ]
  before_script:
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/$SERVICE_NAME
    - apk add jq # install app to parse package.json
    - export PACKAGE_VERSION=$(cat $SERVICE_NAME/package.json | jq -r .version)
    - export IMAGE_TAG=$PACKAGE_VERSION.$CI_PIPELINE_IID
    - echo "IMAGE_TAG=$IMAGE_TAG"
    - echo "${SERVICE_NAME}_IMAGE_TAG"=$IMAGE_TAG
    - echo "${SERVICE_NAME}_IMAGE_TAG=${IMAGE_TAG}" >> build.env
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME:$IMAGE_TAG ./${SERVICE_NAME}
    - docker push $IMAGE_NAME:$IMAGE_TAG
  artifacts: # by default uploaded to all following stages if not specified in dependencies
    reports:
      dotenv: build.env # loaded in all subsequent jobs (must be relative to working directory of .gitlab-ci.yml)


deploy_backend:
  stage: deploy
  variables:
    SERVICE_NAME: "cms_strapi"
    PATH_BCK: "/home/ubuntu/applications/portfolio/cms"
  before_script:
    - chmod 400 $WS_KEY # private key
    - export IMAGE_NAME=$CI_REGISTRY_IMAGE/$SERVICE_NAME
    - export IMAGE_TAG=$(eval "echo \${${SERVICE_NAME}_IMAGE_TAG}") # use nested substitution for sh
    - echo $IMAGE_NAME
    - echo "$SERVICE_NAME"_IMAGE_TAG
    - echo $IMAGE_TAG
    - set -o allexport
    - source $CMS_ENV
    - set +o allexport
  script:
    - ssh -o StrictHostKeyChecking=no -i $WS_KEY ubuntu@$WS_HOST "if [ ! -d ${PATH_BCK} ]; then mkdir -p ${PATH_BCK}; fi;"
    - scp -o StrictHostKeyChecking=no -i $WS_KEY backend/docker-compose.yml ubuntu@$WS_HOST:${PATH_BCK}/
    - ssh -o StrictHostKeyChecking=no -i $WS_KEY ubuntu@$WS_HOST "
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
      export DC_IMAGE_NAME=$IMAGE_NAME &&
      export DC_IMAGE_TAG=$IMAGE_TAG &&
      cd ${PATH_BCK} &&
      docker network create common_network || true &&
      docker-compose down &&
#      export HOST=$HOST \
#      PORT=$PORT \
#      APP_KEYS=$APP_KEYS \
#      API_TOKEN_SALT=$API_TOKEN_SALT \
#      ADMIN_JWT_SECRET=$ADMIN_JWT_SECRET \
#      DATABASE_HOST=$DATABASE_HOST \
#      DATABASE_PORT=$DATABASE_PORT \
#      DATABASE_NAME=$DATABASE_NAME \
#      DATABASE_USERNAME=$DATABASE_USERNAME \
#      DATABASE_PASSWORD=$DATABASE_PASSWORD \
      JWT_SECRET=$JWT_SECRET &&
      docker-compose up -d"
  resource_group: dev # fix The deployment job is older than the previously succeeded deployment job, and therefore cannot be run

#  needs: []